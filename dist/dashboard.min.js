var crossIcon=document.getElementById("right-close-icon");
crossIcon.onclick = function() 
{
   $("#resultleft").addClass("col-lg-12");
   $("#resultleft").removeClass("col-lg-8");
   $("#resultright").addClass("hidden");

    /*var div = document.getElementById('newpost');
    if (div.style.display !== 'none') {
        div.style.display = 'none';
    }
    else {
        div.style.display = 'block';
    }*/
};


var globalContext={};
var Common = (function() {
  var classes = {
    hide: 'hide',
    fade: 'fade',
    fadeOut: 'fade-out'
  };

  // Publicly accessible methods defined
  return {
    buildDomElement: buildDomElementFromJson,
    wait: wait,
    fireEvent: fireEvent,
    listForEach: listForEach,
    partial: partial,
    hide: hide,
    show: show,
    toggle: toggle,
    fadeOut: fadeOut,
    fadeIn: fadeIn,
    fadeToggle: fadeToggle,
    addClass: addClass,
    removeClass: removeClass,
    toggleClass: toggleClass
  };

   
  function buildDomElementFromJson(domJson) {
    // Create a DOM element with the given tag name
    var element = document.createElement(domJson.tagName);

    // Fill the "content" of the element
    if (domJson.text) {
      element.textContent = domJson.text;
    } else if (domJson.html) {
      element.insertAdjacentHTML('beforeend', domJson.html);
    }

    // Add classes to the element
    if (domJson.classNames) {
      for (var i = 0; i < domJson.classNames.length; i++) {
        Common.addClass(element, domJson.classNames[i]);
      }
    }
    // Add attributes to the element
    if (domJson.attributes) {
      for (var j = 0; j < domJson.attributes.length; j++) {
        var currentAttribute = domJson.attributes[j];
        element.setAttribute(currentAttribute.name, currentAttribute.value);
      }
    }
    // Add children elements to the element
    if (domJson.children) {
      for (var k = 0; k < domJson.children.length; k++) {
        var currentChild = domJson.children[k];
        element.appendChild(buildDomElementFromJson(currentChild));
      }
    }
    return element;
  }

  // Wait until a condition is true until running a function
  // (poll based on interval in ms)
  function wait(conditionFunction, execFunction, interval) {
    if (!conditionFunction()) {
      setTimeout(function() {
        wait(conditionFunction, execFunction, interval);
      }, interval);
    } else {
      execFunction();
    }
  }

  // Triggers an event of the given type on the given object
  function fireEvent(element, event) {
    var evt;
    if (document.createEventObject) {
      // dispatch for IE
      evt = document.createEventObject();
      return element.fireEvent('on' + event, evt);
    }
    // otherwise, dispatch for Firefox, Chrome + others
    evt = document.createEvent('HTMLEvents');
    evt.initEvent(event, true, true); // event type,bubbling,cancelable
    return !element.dispatchEvent(evt);
  }

  // A function that runs a for each loop on a List, running the callback function for each one
  function listForEach(list, callback) {
    for (var i = 0; i < list.length; i++) {
      callback.call(null, list[i]);
    }
  }

  function partial(func /* , any number of bound args...*/) {
    var sliceFunc = Array.prototype.slice;
    var args = sliceFunc.call(arguments, 1);
    return function() {
      return func.apply(this, args.concat(sliceFunc.call(arguments, 0)));
    };
  }

  // Adds the 'hide' class to a given element, giving it a CSS display value of 'none'
  function hide(element) {
    addClass(element, classes.hide);
  }

  // Removes the 'hide' class from a given element, removing its CSS display value of 'none'
  function show(element) {
    removeClass(element, classes.hide);
  }

  // Toggles the 'hide' class on a given element, toggling a CSS display value of 'none'
  function toggle(element) {
    toggleClass(element, classes.hide);
  }

  // Causes an element to fade out by adding the 'fade' and 'fade-out' classes
  function fadeOut(element) {
    addClass(element, classes.fade);
    addClass(element, classes.fadeOut);
  }

  // Causes an element to fade back in by adding the 'fade' class and removing the 'fade-out' class
  function fadeIn(element) {
    addClass(element, classes.fade);
    removeClass(element, classes.fadeOut);
  }

  // Causes an element to toggle fading out or back in
  // by adding the 'fade' class and toggling the 'fade-out' class
  function fadeToggle(element) {
    addClass(element, classes.fade);
    toggleClass(element, classes.fadeOut);
  }

  // Auxiliary function for adding a class to an element
  // (to help mitigate IE's lack of support for svg.classList)
  function addClass(element, clazz) {
   if(element) {
    if (element.classList) {
      element.classList.add(clazz);
    } else {
      ieSvgAddClass(element, clazz);
    }
  }
  }

  // Auxiliary function for removing a class from an element
  // (to help mitigate IE's lack of support for svg.classList)
  function removeClass(element, clazz) {
    if (element.classList) {
      element.classList.remove(clazz);
    } else {
      ieSvgRemoveClass(element, clazz);
    }
  }

  // Auxiliary function for toggling a class on an element
  // (to help mitigate IE's lack of support for svg.classList)
  function toggleClass(element, clazz) {
    if (element.classList) {
      element.classList.toggle(clazz);
    } else {
      ieSvgToggleClass(element, clazz);
    }
  }

  // Auxiliary function for checking whether an element contains a class
  // (to help mitigate IE's lack of support for svg.classList)
  function ieSvgContainsClass(element, clazz) {
    return (element.className.baseVal.indexOf(clazz) > -1);
  }

  // Auxiliary function for adding a class to an element without using the classList property
  // (to help mitigate IE's lack of support for svg.classList)
  function ieSvgAddClass(element, clazz, bypassCheck) {
    if (bypassCheck || !ieSvgContainsClass(element, clazz)) {
      var classNameValue = element.className.baseVal;
      classNameValue += (' ' + clazz);
      element.className.baseVal = classNameValue;
    }
  }

  // Auxiliary function for removing a class from an element without using the classList property
  // (to help mitigate IE's lack of support for svg.classList)
  function ieSvgRemoveClass(element, clazz) {
    var classNameValue = element.className.baseVal;
    classNameValue = classNameValue.replace(clazz, '');
    element.className.baseVal = classNameValue;
  }

  // Auxiliary function for toggling a class on an element without using the classList property
  // (to help mitigate IE's lack of support for svg.classList)
  function ieSvgToggleClass(element, clazz) {
    if (ieSvgContainsClass(element, clazz)) {
      ieSvgRemoveClass(element, clazz);
    } else {
      ieSvgAddClass(element, clazz, true);
    }
  }
}());
var Api = (function() {
  'use strict';
  var userPayload;
  var watsonPayload;
  var context;

  var messageEndpoint = '/api/message';

  // Publicly accessible methods defined
  return {
    initConversation: initConversation,
    postConversationMessage: postConversationMessage,
    gethttpMessageTranslation: gethttpMessageTranslation,

    // The request/response getters/setters are defined here to prevent internal methods
    // from calling the methods without any of the callbacks that are added elsewhere.
    getUserPayload: function() {
      return userPayload;
    },
    setUserPayload: function(payload) {
      userPayload = payload;
    },
    getWatsonPayload: function() {
      return watsonPayload;
    },
    setWatsonPayload: function(payload) {
      watsonPayload = payload;
    }
  };

  // Function used for initializing the conversation with the first message from Watson
  function initConversation() {
   // console.log("here10");
    postConversationMessage('',true);
  }

  function gethttpMessageTranslation(jsontextobject , status) {
   // console.log("here11");
    sendhttpMessageTranslation(jsontextobject , status);
  }
  // Send a message request to the server
  function postConversationMessage(text,ShowMessage) {
   // console.log("here12");
      var data = {'input': {'text': text}};
      if (context) {
         data.context = context;
      }
      if(ShowMessage)
        {
          Api.setUserPayload(data);
        }
      sendhttpMessageTranslation(text,'request');
  }
 function sendhttpMessageTranslation(jsontextobject , status ) { 

   //console.log("here4");
          var text;
          if(status == 'response')
          {
            //alert(JSON.stringify(jsontextobject.output.text[0]));
            text=jsontextobject.output.text[0];
            var jsontext={text: text,language:language};
          }
          if(status == 'request')
          {
            text=jsontextobject;
            var jsontext={text: text,language:'en'};
          }
          if( status=='sme')
          {
            text=jsontextobject.sme_id;
            //text=jsontextobject.name+','+jsontextobject.country+','+jsontextobject.weightage+','+jsontextobject.skills+','+'Weightage,Skills';
            //alert(text);
            //text='vikash'+'_'+'Argentina'+'_'+'85'+'_'+'Water'+'_'+'Weightage_Skills';
            var jsontext={text: text,language:language};
          }
          if(status=='pagechange')
          {
            text=jsontextobject;
            var jsontext={text: text,language:language};
          }
          if(status=='department')
          {
            text=jsontextobject;
            var jsontext={text: text,language:language};
          }
          if(status=='location')
          {
            text=jsontextobject;
            var jsontext={text: text,language:language};
          }
          if(status=='result')
          {
            text=jsontextobject;
            var jsontext={text: text,language:language};
          }
          var http = new XMLHttpRequest();
          http.open('POST', '/api/translation', true);
          http.setRequestHeader('Content-type', 'application/json; charset=utf-8');
          http.onload = function() {
          if (http.status === 200 && http.responseText) {
               //alert(http.responseText);
               var result=JSON.parse(http.responseText );
                //console.log('final result',result,status);

              if ( result.output.text  !== undefined ) 
              {
                  //console.log(result.output.text+' my test ');
                  if(status == 'request'){
                    document.getElementById('user-input').disabled = true;
                    Common.addClass(document.getElementById('languagebutton'), 'disabledbutton');
                    Common.addClass(document.getElementById('questionbutton'), 'disabledbutton');
                    postConversationMessage2( result.output.text ,status);}
                   if(status == 'response')
                    {
                      jsontextobject.output.text[0]=result.output.text;
                      document.getElementById('user-input').disabled = false;
                      Common.removeClass(document.getElementById('languagebutton'), 'disabledbutton');
                      Common.removeClass(document.getElementById('questionbutton'), 'disabledbutton');
                      Conversation.focusInput();

                      Api.setWatsonPayload(jsontextobject);
                    }
                    if(status =='sme')
                    {
                         var smevalue=result.output.text.split(',');
                         //alert(smevalue);
/*                         smevalue.push( jsontextobject.sme_profile);
                         smevalue.push( jsontextobject.name);
                         smevalue.push( jsontextobject.country);
                         smevalue.push( jsontextobject.weightage);*/
                         ConversationResponse.smevalueonlanguage(jsontextobject);
                    }
                    if(status =='pagechange')
                    {
                         var value=result.output.text.split(',');
                         ConversationResponse.pageonlanguage(value);
                    }
                    if(status=='department')
                    {
                      console.log(result.output.text);
                      //document.getElementById('deperment').value=result.output.text;
                      document.getElementById('deperment').value = result.output.text;
                      //var current = document.getElementById("deperment");
                     // current.value = result.output.text;
                    }
                    if(status=='location')
                    {
                      console.log("here2");
                      //console.log(result.output.text);
                      //document.getElementById('location').value=result.output.text;
                      document.getElementById('location').value = result.output.text;
                      //var current2 = document.getElementById("location");
                      //current2.value = result.output.text;
                    }
                    if(status=='result')
                    {
                      if(jsontextobject=='Project Title')
                      {
                        document.getElementById('project').value = result.output.text;
                      }
                      else
                      {
                        var res=result.output.text;
                        var res2= res.split(',');
                        document.getElementById('result').innerHTML = res2[0];
                        document.getElementById('sector').value = res2[1];
                      }
                      
                    }
              }
          }
          };
          http.onerror = function() {
          console.error('Network error trying to send message!');
          };
          http.send(JSON.stringify(jsontext));;
   }

 
 function postConversationMessage2(text) { 

        var data = {'input': {'text': text}};
          console.log(text,"context");
          globalContext=context;
        if (context) {
             data.context = context;
          }

        var http = new XMLHttpRequest();
        http.open('POST', messageEndpoint, true);
        http.setRequestHeader('Content-type', 'application/json; charset=utf-8');
        http.onload = function() {
        if (http.status === 200 && http.responseText) {
        var response = JSON.parse(http.responseText);
        globalContext=context = response.context;


       
      console.log(response);
                sendhttpMessageTranslation(response , 'response' );
                //Api.setWatsonPayload(response);
        } else {
        Api.setWatsonPayload({output: {text: [
          'The service may be down at the moment; please check' +
          ' <a href="https://status.ng.bluemix.net/" target="_blank">here</a>' +
          ' for the current status. <br> If the service is OK,' +
          ' the app may not be configured correctly,' +
          ' please check workspace id and credentials for typos. <br>' +
          ' If the service is running and the app is configured correctly,' +
          ' try refreshing the page and/or trying a different request.'
        ]}});
        console.error('Server error when trying to reply!');
        }
      };
      http.onerror = function() {
      console.error('Network error trying to send message!');
      };

      http.send(JSON.stringify(data));
   }

 
}());
/*
 * Copyright © 2016 I.B.M. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the “License”);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an “AS IS” BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/* The TooltipDialogs module handles the display and behavior of the dialog boxes
 * that are used to introduce new users to the system.
 */

/* eslint no-unused-vars: ["error", { "varsIgnorePattern": "^TooltipDialogs$" }] */
/* global Common: true, Conversation: true, Api: true */
var TooltipDialogs = (function() {
  'use strict';
 
  // Publicly accessible methods defined
  return {
    init: init,
  };

  // Initilialize the TooltipDialogs module
  function init() {
               Api.initConversation(''); // Load initial Watson greeting after overlays are gone.
               Conversation.focusInput();
  }

 
  
}());

 
var Conversation = (function() {
  'use strict';
  var ids = {
    userInput: 'user-input',
    userInputDummy: 'user-input-dummy',
    chatFlow: 'chat-flow',
    chatScrollWrapper: 'chat-scroll-wrapper'
  };
  var classes = {
    messageWrapper: 'message-wrapper',
    preBar: 'pre-bar',
    underline: 'underline'
  };
  var authorTypes = {
    user: 'user',
    watson: 'watson'
  };

  // Publicly accessible methods defined
  return {
    init: init,
    setMessage: setMessage,
    sendMessage: sendMessage,
    focusInput: focusInput
  };

  // Initialize Conversation module
  function init() {
    chatSetup();
    initEnterSubmit();
    setupInputBox();
  }

  // Hide chat box until there are messages,
  // set up messages to display when user or Watson sends message
  function chatSetup() {
    document.getElementById(ids.chatScrollWrapper).style.display = 'none';

    var currentRequestPayloadSetter = Api.setUserPayload;
    Api.setUserPayload = function(payload) {
          currentRequestPayloadSetter.call(Api, payload);

          displayMessage(payload, authorTypes.user);
    };

    var currentResponsePayloadSetter = Api.setWatsonPayload;
    Api.setWatsonPayload = function(payload) {
          currentResponsePayloadSetter.call(Api, payload);
          displayMessage(payload, authorTypes.watson);

    };
  }

  // Set up the input box to submit a message when enter is pressed
  function initEnterSubmit() {
    document.getElementById(ids.userInput).addEventListener('keypress', function(event) {
          if (event.keyCode === 13) {
            sendMessage();
            event.preventDefault();
          }
        }, false);
  }

  // Set up the input box to underline text as it is typed
  // This is done by creating a hidden dummy version of the input box that
  // is used to determine what the width of the input text should be.
  // This value is then used to set the new width of the visible input box.
  function setupInputBox() {
    var input = document.getElementById(ids.userInput);
    var dummy = document.getElementById(ids.userInputDummy);
    var minFontSize = 9;
    var maxFontSize = 16;
    var minPadding = 5;
    var maxPadding = 9;

    // If no dummy input box exists, create one
    if (dummy === null) {
      var dummyJson = {
        'tagName': 'div',
        'attributes': [{
          'name': 'id',
          'value': (ids.userInputDummy)
        }]
      };

      dummy = Common.buildDomElement(dummyJson);
      document.body.appendChild(dummy);
    }

    function adjustInput() 
    {
   
      if (input.value === '') {
        // If the input box is empty, remove the underline
        Common.removeClass(input, 'underline');
        input.setAttribute('style', 'width:' + '100%');
        input.style.width = '100%';
      } else {
        // otherwise, adjust the dummy text to match, and then set the width of
        // the visible input box to match it (thus extending the underline)
        Common.addClass(input, classes.underline);
        var txtNode = document.createTextNode(input.value);
        ['font-size', 'font-style', 'font-weight', 'font-family', 'line-height',
          'text-transform', 'letter-spacing'].forEach(function(index) {
            dummy.style[index] = window.getComputedStyle(input, null).getPropertyValue(index);
          });
        dummy.textContent = txtNode.textContent;

        var padding = 0;
        var htmlElem = document.getElementsByTagName('html')[0];
        var currentFontSize = parseInt(window.getComputedStyle(htmlElem, null).getPropertyValue('font-size'), 10);
        if (currentFontSize) {
          padding = Math.floor((currentFontSize - minFontSize) / (maxFontSize - minFontSize)
            * (maxPadding - minPadding) + minPadding);
        } else {
          padding = maxPadding;
        }

        var widthValue = ( dummy.offsetWidth + padding) + 'px';
        input.setAttribute('style', 'width:' + widthValue);
        input.style.width = widthValue;
      }
    }

    // Any time the input changes, or the window resizes, adjust the size of the input box
    input.addEventListener('input', adjustInput);
    window.addEventListener('resize', adjustInput);

    // Trigger the input event once to set up the input box and dummy element
    Common.fireEvent(input, 'input');
  }

  // Retrieve the value of the input box
  function getMessage() {
    var userInput = document.getElementById(ids.userInput);
    return userInput.value;
  }

  // Set the value of the input box
  function setMessage(text) {
    var userInput = document.getElementById(ids.userInput);
    userInput.value = text;
    userInput.focus();
    Common.fireEvent(userInput, 'input');
  }

  // Send the message from the input box
  function sendMessage(newText) {

    var text;
     
    if (newText) {
      text = newText;
    } else {
      text = getMessage();
    }
    if (!text) {
      return;
    }
    setMessage('');

    Api.postConversationMessage(text,true);
  }

  // Display a message, given a message payload and a message type (user or Watson)
  function displayMessage(newPayload, typeValue) {
    var isUser = isUserMessage(typeValue);
    var textExists = (newPayload.input && newPayload.input.text)
      || (newPayload.output && newPayload.output.text);
    
      if (isUser !== null && textExists  ) {
        $('#resultlist').removeClass('textleftR');  
      var resultJson = {
      'tagName': 'li',
      'html' : '<br/><br/>',
      'children': [{
         'tagName': 'li',
        'classNames': ['media'],
         'children': [{
                      'tagName': 'div',
                       'classNames': ['media-body' ] , 
                        'children':[{
                            'tagName': 'div',
                            'classNames': ['media'] ,
                            'children':[{
                              'tagName': 'div',
                              'classNames': ['media-body'] ,
                              'html' : (isUser ? '<a href="javascript:void(0);" style="color: #00b4a0"><i class="fa fa-envelope faa-shake faa-fast animated fa-5x"></i>  </a>' : '<a href="javascript:void(0);"  style="color: #000000"><img alt=""  src="images/result.jpg" width="200" >  </a>')  

                            }]    
                      }]
               }]
          }] 
      };

       // console.log('HD1',newPayload);
        /*var resultDiv=Common.buildDomElement(resultJson);
        var resultElement = document.getElementById('resultlist');
        resultElement.innerHTML='';
        resultElement.appendChild(resultDiv);*/

      if (newPayload.output && Object.prototype.toString.call( newPayload.output.text ) === '[object Array]') {
        newPayload.output.text = newPayload.output.text.filter(function(item) {
          return item && item.length > 0;
        }).join(' ');
      }
      var dataObj = isUser ? newPayload.input : newPayload.output;

      if (!String(dataObj.text).trim()) {
        return;
      }
      var messageDiv = buildMessageDomElement(newPayload, isUser);

       
      var chatBoxElement = document.getElementById(ids.chatFlow);
      chatBoxElement.appendChild(messageDiv);
      updateChat();

    }
  }

  // Determine whether a given message type is user or Watson
  function isUserMessage(typeValue) {
    if (typeValue === authorTypes.user) {
      return true;
    } else if (typeValue === authorTypes.watson) {
      return false;
    }
    return null;
  }

  // Builds the message DOM element (using auxiliary function Common.buildDomElement)
  function buildMessageDomElement(newPayload, isUser) {
 
    var dataObj = isUser ? newPayload.input : newPayload.output;
      var msgoutput=dataObj.text;
      var messageJson;
    
      var d = new Date() ;
      var monthNames = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"];
      
       messageJson = {
     
      'tagName': 'li',
      /*'classNames': ['media','lengthmsg'],*/
      'classNames': (isUser ? [ 'media','lengthmsg','userImage'] : ['media','lengthmsg','systemImage']), 
      'children': [{
         'tagName': 'div',
        'classNames': ['media-body'] ,
         'children': [{
                      'tagName': 'div',
                       'classNames': ['media' ] , 
                        'children':[{
                            'tagName': 'a',
                            'classNames': ['pull-left'] ,
                            'html' : (isUser ? '<img style="width:50px;" src=\'/images/user.png\' />' : '<img style="width:50px;" src=\'/images/blue-logo.png\' />')  
                        },
                         {
                            'tagName': 'div',
                            'classNames': (isUser ? [ 'media-body'] : ['media-body' , classes.preBar]) ,
                            'html' : (isUser ?  '<p class="watsonchattext userContent"  >'+ msgoutput +'<br/><small class="text-muted">'+ (monthNames[d.getMonth()]+'-'+d.getDate()+'-'+d.getFullYear()+' at '+d.getHours()+':'+d.getMinutes()+':'+d.getSeconds())+'</small></p > <hr style="border-top: 1px solid #000;"class="hrclass"/>':  '<p class="watsonchattext sysmemessage" >'+ msgoutput +'<br/><small class="text-muted">'+(monthNames[d.getMonth()]+'-'+d.getDate()+'-'+d.getFullYear()+' at '+d.getHours()+':'+d.getMinutes()+':'+d.getSeconds())+'</small></p><hr  class="hrclass"/>') 
                        }
                        ]
                      }]
           }]
       
             };
        return Common.buildDomElement(messageJson);
           
    
  }

  // Display the chat box if it's currently hidden
  // (i.e. if this is the first message), scroll to the bottom of the chat
  function updateChat() {
    document.getElementById(ids.chatScrollWrapper).style.display = '';
    var messages = document.getElementById(ids.chatFlow).getElementsByClassName('lengthmsg');
    document.getElementById(ids.chatFlow).scrollTop = messages[messages.length - 1].offsetTop;
  }

  // Set browser focus on the input box
  function focusInput() {
    document.getElementById(ids.userInput).focus();
    addlistenerlanguage()
  }

  function addlistenerlanguage()
  {
      var classname = document.getElementsByClassName("selectlang");
  
      for (var i = 0; i < classname.length; i++) 
      {
      classname[i].addEventListener('click', myFunction, false);
      }
  }

 function myFunction() {
      //waitingDialog.show('Loading..... Please Wait', {dialogSize: 'sm', progressType: 'warning'});
    
      language=$(this).attr('id');
      if(language =='en')
      {

              document.getElementById('languagebutton').innerHTML='English <span class="caret"></span>';
              document.getElementById('recentrequest').innerHTML='Find Me An Expert Conversation';
              document.getElementById('result').innerHTML='RESULT';
              setTimeout(function () {waitingDialog.hide();}, 2000);
              document.getElementById('project').value = 'Project Title';
              document.getElementById('sector').value = 'Sector';
        }
        else
        {
             if(language =='es')
             {
                document.getElementById('languagebutton').innerHTML='Spanish <span class="caret"></span>';
             }
             if(language =='pt')
             {
                document.getElementById('languagebutton').innerHTML='Portuguese <span class="caret"></span>';
             }
             //document.getElementById('result').innerHTML='RESULT';
              var valueobj='Find Me An Expert Conversation';
             Api.gethttpMessageTranslation(valueobj,'pagechange');
             Api.gethttpMessageTranslation('Department','department');
             //console.log("test232"+data);
             Api.gethttpMessageTranslation('Location','location');
             Api.gethttpMessageTranslation('RESULT ,Sector','result');
             Api.gethttpMessageTranslation('Project Title','result');
        }
 } 

}());

var ConversationResponse = (function() {
  'use strict';
  var responseFunctions;

  return {
    init: init,
    responseHandler: responseHandler,
    smevalueonlanguage: smevalueonlanguage,
    pageonlanguage:pageonlanguage

  };

  function init() {
    setupResponseHandling();
  }

  function smevalueonlanguage(valueobj)
  {
    updatesmevalueonlanguage(valueobj);
  }
   
  function pageonlanguage(valueobj)
  {
    updatepageonlanguage(valueobj);
  }
   
  // Create a callback when a new Watson response is received to handle Watson's response
  function setupResponseHandling() {
    var currentResponsePayloadSetter = Api.setWatsonPayload;
    Api.setWatsonPayload = function(payload) {
      currentResponsePayloadSetter.call(Api, payload);
      responseHandler(payload);
    };
  }

   
   

  // Called when a Watson response is received, manages the behavior of the app based
  // on the user intent that was determined by Watson
  function responseHandler(data) {
   //if (data && data.intents && data.entities) // && !data.output.error
   if (data && data.intents)
      {
      var primaryIntent = data.context.call_api;
      // console.log("Raman Context",data.context);
      if(data.context  !="") 
      { 
         
        if(data.context.sectors!==undefined )
        {
            sectors=data.context.sectors;
        }

        if(data.context.country!==undefined )
        {
            country=data.context.country;
        } 

      }
       //alert(projects +','+ country);
      if (primaryIntent =='true' && data.context.call_api !== undefined && sectors !== undefined && country !== undefined && sectors !="" && country!="") {
           console.log('APIg',data);
           handleBasicCaseSME( data);
      }
      else{

           //console.log(globalContext.call_api)
           if(typeof globalContext.call_api !="undefined"){

             //var message="Oops, Looks like I can’t find a Subject Matter Expert that you are looking for. I  have information on Subject Matter Experts in the water, transport and energy sectors and for Argentina, Brazil, Mexico, Chile, Bahamas countries. Please look for SME's in the listed sectors and countries";
              //getMessageTranlate(message);
          }
           
      }
    }
  }


  function printTranlsationReposnse(isUser,newPayload){
       
      var dataObj = isUser ? newPayload.input : newPayload.output;
      var msgoutput=dataObj.text;
      var messageJson;
    
      var d = new Date() ;
      var monthNames = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"];
      
       messageJson = {
     
      'tagName': 'li',
      /*'classNames': ['media','lengthmsg'],*/
      'classNames': (isUser ? [ 'media','lengthmsg','userImage'] : ['media','lengthmsg','systemImage']), 
      'children': [{
         'tagName': 'div',
        'classNames': ['media-body'] ,
         'children': [{
                      'tagName': 'div',
                       'classNames': ['media' ] , 
                        'children':[{
                            'tagName': 'a',
                            'classNames': ['pull-left'] ,
                            'html' : (isUser ? '<img style="width:50px;" src=\'/images/user.png\' />' : '<img style="width:50px;" src=\'/images/clould.png\' />')  
                        },
                         {
                            'tagName': 'div',
                            'classNames': (isUser ? [ 'media-body'] : ['media-body' , chatFlow]) ,
                            'html' : (isUser ?  '<p class="watsonchattext userContent">'+ msgoutput +'<br/><small class="text-muted">'+ (monthNames[d.getMonth()]+'-'+d.getDate()+'-'+d.getFullYear()+' at '+d.getHours()+':'+d.getMinutes()+':'+d.getSeconds())+'</small></p > <hr class="hrclass"/>':  '<p class="watsonchattext sysmemessage">'+ msgoutput +'<br/><small class="text-muted">'+(monthNames[d.getMonth()]+'-'+d.getDate()+'-'+d.getFullYear()+' at '+d.getHours()+':'+d.getMinutes()+':'+d.getSeconds())+'</small></p><hr  class="hrclass"/>') 
                        }
                        ]
                      }]
           }]
       
             };
        return Common.buildDomElement(messageJson);
  }


  // created by Raman Start

function sendhttpmessageTrans(jsontextobject , status)
 {
          document.getElementById('user-input').disabled = true;
          var text;
          if(status == 'response')
          {
            //alert(JSON.stringify(jsontextobject.output.text[0]));
            text=jsontextobject.output.text[0];
            var jsontext={text: text,language:language};
          }
          if(status == 'request')
          {
            text=jsontextobject;
            var jsontext={text: text,language:'en'};
          }
          if( status=='sme')
          {
            text=jsontextobject.sme_id;
            //text=jsontextobject.name+','+jsontextobject.country+','+jsontextobject.weightage+','+jsontextobject.skills+','+'Weightage,Skills';
            //alert(text);
            //text='vikash'+'_'+'Argentina'+'_'+'85'+'_'+'Water'+'_'+'Weightage_Skills';
            var jsontext={text: text,language:language};
          }
          if(status=='pagechange')
          {
            text=jsontextobject;
            var jsontext={text: text,language:language};
          }
          
          var http = new XMLHttpRequest();
          http.open('POST', '/api/translation', true);
          http.setRequestHeader('Content-type', 'application/json; charset=utf-8');
          http.onload = function() {
          if (http.status === 200 && http.responseText) {
               //alert(http.responseText);
               var result=JSON.parse(http.responseText );

              if ( result.output.text  !== undefined ) 
              {
                  
                  if(status == 'request'){
                    document.getElementById('user-input').disabled = true;
                    Common.addClass(document.getElementById('languagebutton'), 'disabledbutton');
                     Common.addClass(document.getElementById('questionbutton'), 'disabledbutton');
                    postConversationMessage2( result.output.text ,status);}
                   if(status == 'response')
                    {
                         jsontextobject.output.text[0]=result.output.text;
                    //alert(jsontextobject);
                    document.getElementById('user-input').disabled = false;
                    Common.removeClass(document.getElementById('languagebutton'), 'disabledbutton');
                     Common.removeClass(document.getElementById('questionbutton'), 'disabledbutton');
                    Conversation.focusInput();
                       Api.setWatsonPayload(jsontextobject);
                    }
                    if(status =='sme')
                    {
                         var smevalue=result.output.text.split(',');
                         //alert(smevalue);
/*                         smevalue.push( jsontextobject.sme_profile);
                         smevalue.push( jsontextobject.name);
                         smevalue.push( jsontextobject.country);
                         smevalue.push( jsontextobject.weightage);*/
                         ConversationResponse.smevalueonlanguage(jsontextobject);
                    }
                    if(status =='pagechange')
                    {
                         var value=result.output.text.split(',');
                         ConversationResponse.pageonlanguage(value);
                    }
              }
          }
          };
          http.onerror = function() {
          console.error('Network error trying to send message!');
          };
          http.send(JSON.stringify(jsontext));

 }

 function getMessageTranlate(text)
 {

   //send language and text to translate first
   //text=jsontextobject;
  var jsontext={text: text,language:language};
  var http = new XMLHttpRequest();
  http.open('POST', '/api/translation', true);
  http.setRequestHeader('Content-type', 'application/json; charset=utf-8');
  http.onload = function() 
  {
    if (http.status === 200 && http.responseText) 
    {
          // console.log(http.responseText,"v");
            var result=JSON.parse(http.responseText );

              if ( result.output.text  !== undefined ) 
              {
                  
                postConversationMessage2_new(result.output.text ,status);

              }
             
    }
    else

    {

    console.log(http.responseText,"response hai  23");
    }
  }

 http.send(JSON.stringify(jsontext)); 


 }

  
    function buildMessageDomElement_new(newPayload, isUser) {
 
      var dataObj = newPayload.input;
      var msgoutput=dataObj.text;
      //console.log('ho ja' ,msgoutput); 
      if(msgoutput=='I hope you found what you are looking for, can I help you with anything else?')
      {
        document.getElementById('user-input').disabled = false;
      }
      var messageJson;
    
      var d = new Date() ;
      var monthNames = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"];
      
       messageJson = {
     
      'tagName': 'li',
      'classNames': ['media','lengthmsg'],
      //'classNames': (isUser ? [ 'media','lengthmsg','systemImage'] : ['media','lengthmsg','userImage']), 

      'children': [{
         'tagName': 'div',
        'classNames': ['media-body'] ,
         'children': [{
                      'tagName': 'div',
                       'classNames': ['media' ] , 
                        'children':[{
                            'tagName': 'a',
                            'classNames': ['pull-left'] ,
                            'html' : (isUser ? '<img style="width:50px;" src=\'/images/user.png\' />' : '<img style="width:50px;" src=\'/images/clould.png\' />')  
                        },
                         {
                            'tagName': 'div',
                            'classNames': (isUser ? [ 'media-body'] : ['media-body' , 'pre-bar']) ,
                            'html' : (isUser ?  '<p class="watsonchattext userContent" >'+ msgoutput +'<br/><small class="text-muted">'+ (monthNames[d.getMonth()]+'-'+d.getDate()+'-'+d.getFullYear()+' at '+d.getHours()+':'+d.getMinutes()+':'+d.getSeconds())+'</small></p > <hr class="hrclass"/>':  '<p class="watsonchattext sysmemessage" >'+ msgoutput +'<br/><small class="text-muted">'+(monthNames[d.getMonth()]+'-'+d.getDate()+'-'+d.getFullYear()+' at '+d.getHours()+':'+d.getMinutes()+':'+d.getSeconds())+'</small></p><hr  class="hrclass"/>') 
                        }
                        ]
                      }]
           }]
       
             };
        return Common.buildDomElement(messageJson);
           
    
  
  }
 function postConversationMessage2_new(text)
 {
  //console.log("1");
   var context='';
  var data = {'input': {'text': text}};
        
        if (globalContext) {
         data.context = globalContext;
          }

        var http = new XMLHttpRequest();
        http.open('POST', '/api/message', true);
        http.setRequestHeader('Content-type', 'application/json; charset=utf-8');
        http.onload = function() {
        if (http.status === 200 && http.responseText) {
        var response = JSON.parse(http.responseText);
        globalContext = response.context;
       

        //append the code in chat window

       //jsontextobject.output.text[0]=response.output.text;
                    //alert(jsontextobject);
     /* document.getElementById('user-input').disabled = false;
      Common.removeClass(document.getElementById('languagebutton'), 'disabledbutton');
      Conversation.focusInput();

      Api.setWatsonPayload(response.output.text);*/

    var output = buildMessageDomElement_new(response, false);
    console.log('lo a gayi output',output);
    var chatBoxElement = document.getElementById("chat-flow");
    chatBoxElement.appendChild(output);
    document.getElementById('chat-scroll-wrapper').style.display = '';
    var messages = document.getElementById("chat-flow").getElementsByClassName('lengthmsg');
    document.getElementById("chat-flow").scrollTop = messages[messages.length - 1].offsetTop;
  



        //alert(response);
               // sendhttpMessageTranslation(response , 'response' );
                //Api.setWatsonPayload(response);
        } else {
        Api.setWatsonPayload({output: {text: [
          'The service may be down at the moment; please check' +
          ' <a href="https://status.ng.bluemix.net/" target="_blank">here</a>' +
          ' for the current status. <br> If the service is OK,' +
          ' the app may not be configured correctly,' +
          ' please check workspace id and credentials for typos. <br>' +
          ' If the service is running and the app is configured correctly,' +
          ' try refreshing the page and/or trying a different request.'
        ]}});
        console.error('Server error when trying to reply!');
        }
      };
      http.onerror = function() {
      console.error('Network error trying to send message!');
      };

      http.send(JSON.stringify(data));

 } 
  //End

  // Handles the case where there is valid intent and entities
   function  handleBasicCaseSME( data)
   {
      document.getElementById('user-input').disabled = true;
       //console.log('HD2');
       var resultJson = {
      'tagName': 'li',
      'attributes' : [{'name':'id','value':'resultlistitem'}],
      'classNames': ['hide'] ,
      'children': [{
         'tagName': 'div',
        'classNames': ['media-body'],
         'children': [{
                      'tagName': 'div',
                       'classNames': ['media'] , 
                        'children':[{
                            'tagName': 'div',
                            'classNames': ['media-body'] ,
                            //'html' : ' <h5><b>Please Wait</b></h5><a href="javascript:void(0);" style="color: #000000"> <i class="fa fa-spinner faa-spin animated fa-5x"></i></a>'
                      }]
               }]
          }] 
      };

         /*commented on 24 Jan 2017 RV*/ 
       //console.log('DATA2',data);

        var resultDiv=Common.buildDomElement(resultJson);
        var resultElement = document.getElementById('resultlist');
        resultElement.innerHTML='';
        resultElement.appendChild(resultDiv);

        Common.show(document.getElementById('resultlistitem'));
        
        $('#resultlist').removeClass('textleftR');

        var messageEndpoint="https://idbi-app.mybluemix.net/GetSmeServlet?sector="+sectors+"&country="+country;
        //var messageEndpoint ="https://idbi-app.mybluemix.net/GetSmeServlet?sector=Water&country=Barbados"; 
        var http = new XMLHttpRequest();       
        http.open('GET', messageEndpoint, true);
        http.setRequestHeader('Content-type', 'text/plain; charset=utf-8');
        http.onload = function() {
          
        if (http.status === 200  && http.responseText) {
           document.getElementById('user-input').disabled = true;
           var resultJson1 = {
          'tagName': 'li',
          'attributes' : [{'name':'id','value':'resultlistitem'}],
          'classNames': ['hide'] ,
          'children': [{
          'tagName': 'div',
          'classNames': ['media-body'],
          'children': [{
                      'tagName': 'div',
                       'classNames': ['media'] , 
                        'children':[{
                            'tagName': 'div',
                            'classNames': ['media-body'] ,
                           // 'html' : '<h5></h5><a href="javascript:void(0);" style="color: #00b4a0"> <i class="fa fa-thumbs-o-up faa-bounce animated fa-5x"></i></a>'
                      }]
               }]
          }] 

      };

           /*commented on 24 Jan 2017 RV*/    
          var resultDiv1=Common.buildDomElement(resultJson1);
          var resultElement = document.getElementById('resultlist');
          resultElement.innerHTML='';
          resultElement.appendChild(resultDiv1);
            
          Common.show(document.getElementById('resultlistitem'));
          var response= JSON.parse( http.responseText );
           //Api.postConversationMessage(response.status,false);
           //Api.initConversation(response.status);  
          

          
           if(response !="")
           {
           setTimeout(function(){
             Common.hide(document.getElementById('resultlistitem'));
             
             document.getElementById('resultlist').innerHTML='';
             
                console.log(response.status,"STATUS");

                

                if(response.status.trim().toLowerCase()=="success")
                 {
                  //console.log(response.list.length);
                     var output="";
                     if(!response.list.length){

                              var m="Oops, Looks like I can’t find a Subject Matter Expert that you are looking for. I  have information on Subject Matter Experts in the water, transport and energy sectors and for Argentina, Brazil, Mexico, Chile, Bahamas countries. Please look for SME's in the listed sectors and countries.";

                                getMessageTranlate(m);

                             
                     }
                     else{
                             var m="I hope you found what you are looking for, can I help you with anything else?";

                                getMessageTranlate(m);

                           //output= printTranlsationReposnse(false,{output:{text:"I hope you found what you are looking for, can I help you with anything else?"}});
                     }
                     /* var chatBoxElement = document.getElementById("chat-flow");
                        chatBoxElement.appendChild(output);
                        
                      document.getElementById("chat-scroll-wrapper").style.display = '';
                      var messages = document.getElementById("chat-flow").getElementsByClassName('lengthmsg');
                      document.getElementById("chat-flow").scrollTop = messages[messages.length - 1].offsetTop;*/



                    
                 }
                 else if(!response.list.length){

                                var m="Oops, Looks like I can’t find a Subject Matter Expert that you are looking for. I  have information on Subject Matter Experts in the water, transport and energy sectors and for Argentina, Brazil, Mexico, Chile, Bahamas countries. Please look for SME's in the listed sectors and countries.";

                                  getMessageTranlate(m);

                             
                     }


                $("#resultleft").removeClass("col-lg-12");
                $("#resultleft").addClass("col-lg-8");
                $("#resultright").removeClass("hidden");
                  

        
        

                 
                $.each(response.list, function (index, valueobj) {

                updatesmevalueonlanguage(valueobj);
                });

             /*if(language =='en'){
                $.each(response, function (index, valueobj) {
                //alert(JSON.stringify(valueobj));
                updatesmevalueonlanguage(valueobj);
                });
                }
                else
                {
                $.each(response, function (index, valueobj) {
                 // alert(JSON.stringify(valueobj));
                Api.gethttpMessageTranslation(valueobj,'sme');
                });
                }*/
            }, 2500);
           }  
         }
         };
         http.onerror = function() {
         alert('Network error trying to send message!');
         };
         http.send();  
         document.getElementById('user-input').disabled = false;
   }

 
  // Calls the appropriate response function based on the given intent and entity returned by Watson
  function  updatesmevalueonlanguage(valueobj){
        document.getElementById('user-input').disabled = true;
        //console.log('HD3');
        var Base64={_keyStr:"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",encode:function(e){var t="";var n,r,i,s,o,u,a;var f=0;e=Base64._utf8_encode(e);while(f<e.length){n=e.charCodeAt(f++);r=e.charCodeAt(f++);i=e.charCodeAt(f++);s=n>>2;o=(n&3)<<4|r>>4;u=(r&15)<<2|i>>6;a=i&63;if(isNaN(r)){u=a=64}else if(isNaN(i)){a=64}t=t+this._keyStr.charAt(s)+this._keyStr.charAt(o)+this._keyStr.charAt(u)+this._keyStr.charAt(a)}return t},decode:function(e){var t="";var n,r,i;var s,o,u,a;var f=0;e=e.replace(/[^A-Za-z0-9+/=]/g,"");while(f<e.length){s=this._keyStr.indexOf(e.charAt(f++));o=this._keyStr.indexOf(e.charAt(f++));u=this._keyStr.indexOf(e.charAt(f++));a=this._keyStr.indexOf(e.charAt(f++));n=s<<2|o>>4;r=(o&15)<<4|u>>2;i=(u&3)<<6|a;t=t+String.fromCharCode(n);if(u!=64){t=t+String.fromCharCode(r)}if(a!=64){t=t+String.fromCharCode(i)}}t=Base64._utf8_decode(t);return t},_utf8_encode:function(e){e=e.replace(/rn/g,"n");var t="";for(var n=0;n<e.length;n++){var r=e.charCodeAt(n);if(r<128){t+=String.fromCharCode(r)}else if(r>127&&r<2048){t+=String.fromCharCode(r>>6|192);t+=String.fromCharCode(r&63|128)}else{t+=String.fromCharCode(r>>12|224);t+=String.fromCharCode(r>>6&63|128);t+=String.fromCharCode(r&63|128)}}return t},_utf8_decode:function(e){var t="";var n=0;var r=c1=c2=0;while(n<e.length){r=e.charCodeAt(n);if(r<128){t+=String.fromCharCode(r);n++}else if(r>191&&r<224){c2=e.charCodeAt(n+1);t+=String.fromCharCode((r&31)<<6|c2&63);n+=2}else{c2=e.charCodeAt(n+1);c3=e.charCodeAt(n+2);t+=String.fromCharCode((r&15)<<12|(c2&63)<<6|c3&63);n+=3}}return t}}
        // Encode the String
        var encodedSectorsString  = Base64.encode(sectors);
        var encodedCountryString  = Base64.encode(country);
        var sectorparameterString = Base64.encode('sector');
        var countryparameterString= Base64.encode('country');
        var deperment             = document.getElementById("deperment").value;
        var location              = document.getElementById("location").value;
        var project               = document.getElementById("project").value;
        var sector                = document.getElementById("sector").value;
/*// Decode the String
var decodedString = Base64.decode(encodedString);
console.log(valueobj);
*///console.log(valueobj+ 'value test');
          var resultJson = {
          'tagName': 'li',
           'classNames': ['media'] ,
          'children': [{
          'tagName': 'div',
          'classNames': ['media-body'],
          'children': [{
                      'tagName': 'div',
                       'classNames': ['media' ] ,
                       'html':'<a class="pull-left" target="_blank" href="sme.html?sme='+valueobj.sme_id+'&'+sectorparameterString+'='+encodedSectorsString+'&'+countryparameterString+'='+encodedCountryString+'&score='+valueobj.total_score+'&department='+deperment+'&location='+location+'&project='+project+'&sector='+sector+'"><img class="media-object img-circle" style="max-height:40px;" src="images/dummy.jpg" /></a>', 
                        'children':[{
                            'tagName': 'div',
                            'classNames': ['media-body'] ,
                             'html' : ( '<h5><a class="pull-left-content" target="_blank" href="sme.html?sme='+valueobj.sme_id+'&'+sectorparameterString+'='+encodedSectorsString+'&'+countryparameterString+'='+encodedCountryString+'&score='+valueobj.total_score+'&department='+deperment+'&location='+location+'&project='+project+'&sector='+sector+'"><span>'+ valueobj.sme_id+ '</span><span> '+valueobj.location+ '</span></a></h5><hr class="hrclass"/>' )

                      }]
               }]
          }] 
          };
 
           //'html' : ( (language =='en') ? '<h5>'+valueobj.sme_id+' | '+valueobj.country+'</h5>  <small class="text-muted"> Weightage-'+ valueobj.weightage+' & Skills- '+valueobj.skills+'</small> ' : '<h5>'+valueobj[4]+' | '+valueobj[5]+'</h5>  <small class="text-muted">'+valueobj[1]+'-'+ valueobj[6]+' & '+valueobj[2]+'- '+valueobj[0]+'</small>' )
    
          var resultDiv=Common.buildDomElement(resultJson);
          var resultElement = document.getElementById('resultlist');
          resultElement.appendChild(resultDiv); 

           // console.log('ADD CLASS',$('#resultlist li').length); 

                if ($('#resultlist li').length > 0) 
                { 
                  $('#resultlist').addClass('textleftR');
                }
     document.getElementById('user-input').disabled = false;      
  } 
  //https://idbi-app.mybluemix.net/GetSmeDocMapServlet?sme=Evan&sector=Water&country=Barbados

    // Calls the appropriate response function based on the given intent and entity returned by Watson
  function  updatepageonlanguage(valueobj){
              //console.log("undef"+valueobj);
              document.getElementById('recentrequest').innerHTML=valueobj[0];
              //document.getElementById('result').innerHTML=valueobj[1];
              waitingDialog.hide();        
  }


}());
/*
 * Copyright © 2016 I.B.M. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the “License”);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an “AS IS” BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/* The Global module is used to initialize the other modules */

/* global TooltipDialogs: true, Conversation: true, ConversationResponse: true, Sidebar: true, Animations: true, Common: true */


  function openNav() {
    document.getElementById("mySidenav").style.width = "425px";
  }

  function closeNav() {
    document.getElementById("mySidenav").style.width = "0";
  }

  function getquestion(question) {
    var userInput = document.getElementById('user-input');
    userInput.value = question;
    userInput.focus();
   }

(function() {
  //
  Conversation.init();
  ConversationResponse.init();
  document.getElementById('user-input').disabled = true;
  Common.addClass(document.getElementById('languagebutton'), 'disabledbutton');
   Common.addClass(document.getElementById('questionbutton'), 'disabledbutton');
 $(document).ready(function(){
           TooltipDialogs.init();
                    //    Api.initConversation(); // Load initial Watson greeting after overlays are gone.
                     //   Conversation.focusInput();
        });    
}());
